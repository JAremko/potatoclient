{:linters {:unresolved-symbol {:exclude [(malli.core/=>)]},
           :type-mismatch {:namespaces {potatoclient.theme {key->icon {:arities {2 {:args [:keyword :keyword],
                                                                                    :ret :any}}},
                                                            apply-darklaf-theme! {:arities {1 {:args [:keyword],
                                                                                               :ret :any}}},
                                                            apply-nimbus-theme! {:arities {1 {:args [:keyword],
                                                                                              :ret :any}}},
                                                            get-theme {:arities {1 {:args [:keyword], :ret :map}}},
                                                            apply-theme! {:arities {2 {:args [:any :keyword], :ret :any}}},
                                                            preload-theme-icons! {:arities {0 {:args [], :ret :any}}},
                                                            get-current-theme {:arities {0 {:args [], :ret :keyword}}},
                                                            get-available-themes {:arities {0 {:args [],
                                                                                               :ret :sequential}}},
                                                            get-theme-name {:arities {1 {:args [:keyword], :ret :string}}},
                                                            get-theme-i18n-key {:arities {1 {:args [:keyword],
                                                                                             :ret :keyword}}},
                                                            initialize-theme! {:arities {0 {:args [], :ret :any}}},
                                                            set-theme! {:arities {1 {:args [:keyword], :ret :any}}},
                                                            get-theme-color {:arities {2 {:args [:keyword :keyword],
                                                                                          :ret :any}}}},
                                        user {test-fn2 {:arities {1 {:args [:keyword], :ret :keyword}}},
                                              test-fn3 {:arities {1 {:args [:keyword], :ret :keyword}}},
                                              test-simple-fn {:arities {1 {:args [:int], :ret :int}}},
                                              test-fn {:arities {1 {:args [:keyword], :ret :keyword}}},
                                              simple-test {:arities {1 {:args [:keyword], :ret :keyword}}}},
                                        potatoclient.state.config {get-locale {:arities {0 {:args [], :ret :keyword}}},
                                                                   set-locale! {:arities {1 {:args [:keyword],
                                                                                             :ret :any}}},
                                                                   get-domain {:arities {0 {:args [], :ret :string}}},
                                                                   set-domain! {:arities {1 {:args [:string], :ret :any}}},
                                                                   get-config {:arities {0 {:args [], :ret :map}}}},
                                        potatoclient.config {get-config-file {:arities {0 {:args [], :ret :any}}},
                                                             save-domain! {:arities {1 {:args [:string], :ret :boolean}}},
                                                             ensure-config-dir! {:arities {0 {:args [], :ret :any}}},
                                                             load-config {:arities {0 {:args [],
                                                                                       :ret {:op :keys,
                                                                                             :req {:theme :keyword,
                                                                                                   :domain :string,
                                                                                                   :locale :keyword}}}}},
                                                             get-theme {:arities {0 {:args [], :ret :keyword}}},
                                                             save-locale! {:arities {1 {:args [:keyword], :ret :boolean}}},
                                                             get-config-location {:arities {0 {:args [], :ret :string}}},
                                                             save-config! {:arities {1 {:args [{:op :keys,
                                                                                                :req {:theme :keyword,
                                                                                                      :domain :string,
                                                                                                      :locale :keyword}}],
                                                                                        :ret :boolean}}},
                                                             get-domain {:arities {0 {:args [], :ret :string}}},
                                                             initialize! {:arities {0 {:args [],
                                                                                       :ret {:op :keys,
                                                                                             :req {:theme :keyword,
                                                                                                   :domain :string,
                                                                                                   :locale :keyword}}}}},
                                                             save-theme! {:arities {1 {:args [:keyword], :ret :boolean}}},
                                                             get-locale {:arities {0 {:args [], :ret :keyword}}},
                                                             update-config! {:arities {2 {:args [:keyword :any],
                                                                                          :ret :boolean}}},
                                                             get-config-dir {:arities {0 {:args [], :ret :any}}}},
                                        potatoclient.events.stream {format-window-event {:arities {1 {:args [{:op :keys,
                                                                                                              :opt {:button :int,
                                                                                                                    :clickCount :pos-int,
                                                                                                                    :wheelRotation :number},
                                                                                                              :req {:type :keyword,
                                                                                                                    :x :number,
                                                                                                                    :y :number}}],
                                                                                                      :ret :string}}},
                                                                    format-navigation-event {:arities {1 {:args [{:op :keys,
                                                                                                                  :opt {:button :int,
                                                                                                                        :clickCount :pos-int,
                                                                                                                        :wheelRotation :number},
                                                                                                                  :req {:type :keyword,
                                                                                                                        :ndcX :number,
                                                                                                                        :ndcY :number}}],
                                                                                                          :ret :string}}},
                                                                    handle-response-event {:arities {2 {:args [:keyword
                                                                                                               :map],
                                                                                                        :ret :nil}}},
                                                                    handle-navigation-event {:arities {1 {:args [{:op :keys,
                                                                                                                  :req {:event :map}}],
                                                                                                          :ret :nil}}},
                                                                    handle-window-event {:arities {1 {:args [{:op :keys,
                                                                                                              :req {:event :map}}],
                                                                                                      :ret :nil}}},
                                                                    stream-connected? {:arities {1 {:args [:keyword],
                                                                                                    :ret :boolean}}},
                                                                    all-streams-connected? {:arities {0 {:args [],
                                                                                                         :ret :boolean}}}},
                                        potatoclient.state.ui {register-ui-element! {:arities {2 {:args [:keyword :any],
                                                                                                  :ret :any}}},
                                                               get-ui-element {:arities {1 {:args [:keyword], :ret :any}}},
                                                               all-ui-elements {:arities {0 {:args [], :ret :sequential}}}},
                                        potatoclient.i18n {init! {:arities {0 {:args [], :ret :any}}},
                                                           load-translation-file {:arities {1 {:args [:keyword],
                                                                                               :ret :nilable/map}}},
                                                           load-translations! {:arities {0 {:args [], :ret :map}}},
                                                           get-current-locale {:arities {0 {:args [], :ret :keyword}}},
                                                           tr {:arities {:varargs {:args [:keyword
                                                                                          {:op :rest, :spec :any}],
                                                                                   :ret :string,
                                                                                   :min-arity 1}}},
                                                           get-available-locales {:arities {0 {:args [],
                                                                                               :ret :sequential}}},
                                                           set-locale! {:arities {1 {:args [:keyword], :ret :any}}},
                                                           reload-translations! {:arities {0 {:args [], :ret :any}}}},
                                        potatoclient.ui.main-frame {create-main-frame {:arities {1 {:args [:map],
                                                                                                    :ret :any}}},
                                                                    save-window-state {:arities {1 {:args [:any],
                                                                                                    :ret :any}}},
                                                                    create-theme-menu {:arities {1 {:args [:any],
                                                                                                    :ret :any}}},
                                                                    make-centered {:arities {1 {:args [:any], :ret :any}}},
                                                                    load-window-state {:arities {0 {:args [],
                                                                                                    :ret {:op :keys,
                                                                                                          :req {:bounds :any,
                                                                                                                :extended-state :int},
                                                                                                          :nilable true}}}},
                                                                    create-help-menu {:arities {0 {:args [], :ret :any}}},
                                                                    create-language-menu {:arities {0 {:args [],
                                                                                                       :ret :any}}},
                                                                    restore-window-state! {:arities {1 {:args [:any],
                                                                                                        :ret :any}}},
                                                                    create-menu-bar {:arities {1 {:args [:any],
                                                                                                  :ret :any}}},
                                                                    preserve-window-state {:arities {1 {:args [:any],
                                                                                                        :ret :any}}},
                                                                    setup-window-persistence {:arities {1 {:args [:any],
                                                                                                           :ret :any}}},
                                                                    restore-window-state {:arities {1 {:args [:any],
                                                                                                       :ret :any}}},
                                                                    create-view-menu {:arities {1 {:args [:any],
                                                                                                   :ret :any}}}},
                                        potatoclient.reports {generate-all-reports! {:arities {0 {:args [], :ret :any}}},
                                                              generate-unspecced-functions-report! {:arities {0 {:args [],
                                                                                                                 :ret :nilable/string},
                                                                                                              1 {:args [{:op :keys,
                                                                                                                         :opt {:data :map,
                                                                                                                               :total :nat-int},
                                                                                                                         :req {:status :keyword,
                                                                                                                               :message :string}}],
                                                                                                                 :ret :nilable/string}}}},
                                        potatoclient.ipc {restart-stream {:arities {2 {:args [:keyword :string],
                                                                                       :ret :any}}},
                                                          send-command-to-stream {:arities {2 {:args [:keyword :map],
                                                                                               :ret :boolean}}},
                                                          process-stream-output {:arities {2 {:args [:keyword :any],
                                                                                              :ret :any}}},
                                                          handle-message {:arities {2 {:args [:keyword :string],
                                                                                       :ret :any}}},
                                                          parse-message {:arities {1 {:args [:string],
                                                                                      :ret {:op :keys,
                                                                                            :req {:type :keyword},
                                                                                            :nilable true}}}},
                                                          stop-stream {:arities {1 {:args [:keyword], :ret :any}}},
                                                          start-output-processor {:arities {2 {:args [:keyword
                                                                                                      {:op :keys,
                                                                                                       :req {:process :any,
                                                                                                             :writer :any,
                                                                                                             :stdout-reader :any,
                                                                                                             :stderr-reader :any,
                                                                                                             :output-chan :any,
                                                                                                             :stream-id :string,
                                                                                                             :state :any}}],
                                                                                               :ret :any}}},
                                                          broadcast-command {:arities {1 {:args [:map], :ret :any}}},
                                                          format-error {:arities {2 {:args [:string :any], :ret :string}}},
                                                          start-stream {:arities {2 {:args [:keyword :string],
                                                                                     :ret :any}}}},
                                        potatoclient.state {clear-stream! {:arities {1 {:args [:keyword], :ret :any}}},
                                                            set-locale! {:arities {1 {:args [:keyword], :ret :any}}},
                                                            all-streams {:arities {0 {:args [], :ret :map}}},
                                                            get-ui-element {:arities {1 {:args [:keyword], :ret :any}}},
                                                            current-state {:arities {0 {:args [], :ret :map}}},
                                                            get-domain {:arities {0 {:args [], :ret :string}}},
                                                            set-domain! {:arities {1 {:args [:string], :ret :any}}},
                                                            set-stream! {:arities {2 {:args [:keyword
                                                                                             {:op :keys,
                                                                                              :req {:process :any,
                                                                                                    :writer :any,
                                                                                                    :stdout-reader :any,
                                                                                                    :stderr-reader :any,
                                                                                                    :output-chan :any,
                                                                                                    :stream-id :string,
                                                                                                    :state :any}}],
                                                                                      :ret :any}}},
                                                            register-ui-element! {:arities {2 {:args [:keyword :any],
                                                                                               :ret :any}}},
                                                            get-locale {:arities {0 {:args [], :ret :keyword}}},
                                                            get-stream {:arities {1 {:args [:keyword],
                                                                                     :ret {:op :keys,
                                                                                           :req {:process :any,
                                                                                                 :writer :any,
                                                                                                 :stdout-reader :any,
                                                                                                 :stderr-reader :any,
                                                                                                 :output-chan :any,
                                                                                                 :stream-id :string,
                                                                                                 :state :any},
                                                                                           :nilable true}}}}},
                                        potatoclient.main {-main {:arities {:varargs {:args [{:op :rest, :spec :any}],
                                                                                      :ret :any,
                                                                                      :min-arity 0}}}},
                                        potatoclient.instrumentation {find-unspecced-functions {:arities {0 {:args [],
                                                                                                             :ret :map}}},
                                                                      report-unspecced-functions {:arities {0 {:args [],
                                                                                                               :ret {:op :keys,
                                                                                                                     :opt {:data :map,
                                                                                                                           :total :nat-int},
                                                                                                                     :req {:status :keyword,
                                                                                                                           :message :string}}}}}},
                                        potatoclient.runtime {release-build? {:arities {0 {:args [], :ret :boolean}}}},
                                        potatoclient.process {start-stream-process {:arities {2 {:args [:string :string],
                                                                                                 :ret {:op :keys,
                                                                                                       :req {:process :any,
                                                                                                             :writer :any,
                                                                                                             :stdout-reader :any,
                                                                                                             :stderr-reader :any,
                                                                                                             :output-chan :any,
                                                                                                             :stream-id :string,
                                                                                                             :state :any}}}}},
                                                              send-command {:arities {2 {:args [{:op :keys,
                                                                                                 :req {:process :any,
                                                                                                       :writer :any,
                                                                                                       :stdout-reader :any,
                                                                                                       :stderr-reader :any,
                                                                                                       :output-chan :any,
                                                                                                       :stream-id :string,
                                                                                                       :state :any}}
                                                                                                :map],
                                                                                         :ret :boolean}}},
                                                              stop-stream {:arities {1 {:args [{:op :keys,
                                                                                                :req {:process :any,
                                                                                                      :writer :any,
                                                                                                      :stdout-reader :any,
                                                                                                      :stderr-reader :any,
                                                                                                      :output-chan :any,
                                                                                                      :stream-id :string,
                                                                                                      :state :any}}],
                                                                                        :ret :any}}},
                                                              cleanup-all-processes {:arities {0 {:args [], :ret :any},
                                                                                               1 {:args [:map],
                                                                                                  :ret :any}}},
                                                              process-alive? {:arities {1 {:args [{:op :keys,
                                                                                                   :req {:process :any,
                                                                                                         :writer :any,
                                                                                                         :stdout-reader :any,
                                                                                                         :stderr-reader :any,
                                                                                                         :output-chan :any,
                                                                                                         :stream-id :string,
                                                                                                         :state :any}}],
                                                                                           :ret :boolean}}}},
                                        potatoclient.proto {get-camera-day {:arities {1 {:args [:map], :ret :any}}},
                                                            cmd-noop {:arities {2 {:args [:pos-int :keyword], :ret :map}}},
                                                            explain-invalid-command? {:arities {1 {:args [:map],
                                                                                                   :ret :string}}},
                                                            handle-window-event {:arities {2 {:args [{:op :keys,
                                                                                                      :req {:process :any,
                                                                                                            :writer :any,
                                                                                                            :stdout-reader :any,
                                                                                                            :stderr-reader :any,
                                                                                                            :output-chan :any,
                                                                                                            :stream-id :string,
                                                                                                            :state :any}}
                                                                                                     :map],
                                                                                              :ret :any}}},
                                                            valid-command? {:arities {1 {:args [:map], :ret :boolean}}},
                                                            cameras-available? {:arities {1 {:args [:map],
                                                                                             :ret :boolean}}},
                                                            get-camera-heat {:arities {1 {:args [:map], :ret :any}}},
                                                            create-gimbal-angle-command {:arities {2 {:args [:number
                                                                                                             :number],
                                                                                                      :ret {:op :keys,
                                                                                                            :req {:protocol-version :pos-int,
                                                                                                                  :session-id :pos-int,
                                                                                                                  :important :boolean,
                                                                                                                  :from-cv-subsystem :boolean,
                                                                                                                  :client-type :keyword,
                                                                                                                  :payload-type :keyword,
                                                                                                                  :payload :map}}}}},
                                                            get-gps-info {:arities {1 {:args [:map], :ret :any}}},
                                                            deserialize-state {:arities {1 {:args [:char-sequence],
                                                                                            :ret :map}}},
                                                            serialize-cmd {:arities {1 {:args [:map],
                                                                                        :ret :char-sequence}}},
                                                            message->bytes {:arities {1 {:args [:any],
                                                                                         :ret :char-sequence}}},
                                                            create-lrf-single-pulse-command {:arities {0 {:args [],
                                                                                                          :ret {:op :keys,
                                                                                                                :req {:protocol-version :pos-int,
                                                                                                                      :session-id :pos-int,
                                                                                                                      :important :boolean,
                                                                                                                      :from-cv-subsystem :boolean,
                                                                                                                      :client-type :keyword,
                                                                                                                      :payload-type :keyword,
                                                                                                                      :payload :map}}}}},
                                                            write-delimited {:arities {2 {:args [:any :any], :ret :any}}},
                                                            parse-command {:arities {1 {:args [:char-sequence],
                                                                                        :ret {:op :keys,
                                                                                              :req {:protocol-version :pos-int,
                                                                                                    :session-id :pos-int,
                                                                                                    :important :boolean,
                                                                                                    :from-cv-subsystem :boolean,
                                                                                                    :client-type :keyword,
                                                                                                    :payload-type :keyword,
                                                                                                    :payload :map},
                                                                                              :nilable true}}}},
                                                            get-lrf-info {:arities {1 {:args [:map], :ret :any}}},
                                                            get-location {:arities {1 {:args [:map], :ret :nilable/map}}},
                                                            create-window-event {:arities {1 {:args [:map],
                                                                                              :ret :char-sequence}}},
                                                            create-message {:arities {2 {:args [:keyword :map],
                                                                                         :ret :any}}},
                                                            get-compass-info {:arities {1 {:args [:map], :ret :any}}},
                                                            cmd-frozen {:arities {2 {:args [:pos-int :keyword],
                                                                                     :ret :map}}},
                                                            create-lrf-request-command {:arities {0 {:args [],
                                                                                                     :ret {:op :keys,
                                                                                                           :req {:protocol-version :pos-int,
                                                                                                                 :session-id :pos-int,
                                                                                                                 :important :boolean,
                                                                                                                 :from-cv-subsystem :boolean,
                                                                                                                 :client-type :keyword,
                                                                                                                 :payload-type :keyword,
                                                                                                                 :payload :map}}}}},
                                                            get-time-info {:arities {1 {:args [:map], :ret :any}}},
                                                            create-navigation-event {:arities {1 {:args [:map],
                                                                                                  :ret :char-sequence}}},
                                                            map->ProtoMapper_potatoclient_proto_proto-mapper {:arities {1 {:args [:map],
                                                                                                                           :ret :any}}},
                                                            explain-invalid-command {:arities {1 {:args [:map],
                                                                                                  :ret :string}}},
                                                            handle-gimbal-command {:arities {2 {:args [:number :number],
                                                                                                :ret :any}}},
                                                            handle-lrf-command {:arities {1 {:args [:keyword],
                                                                                             :ret :any}}},
                                                            get-system-info {:arities {1 {:args [:map], :ret :any}}},
                                                            ->ProtoMapper_potatoclient_proto_proto-mapper {:arities {2 {:args [:any
                                                                                                                               :any],
                                                                                                                        :ret :any}}},
                                                            build-message {:arities {1 {:args [:any], :ret :any}}},
                                                            cmd-ping {:arities {2 {:args [:pos-int :keyword], :ret :map}}},
                                                            handle-navigation-event {:arities {2 {:args [{:op :keys,
                                                                                                          :req {:process :any,
                                                                                                                :writer :any,
                                                                                                                :stdout-reader :any,
                                                                                                                :stderr-reader :any,
                                                                                                                :output-chan :any,
                                                                                                                :stream-id :string,
                                                                                                                :state :any}}
                                                                                                         :map],
                                                                                                  :ret :any}}},
                                                            set-field! {:arities {3 {:args [:any :keyword :any],
                                                                                     :ret :any}}},
                                                            create-builder {:arities {1 {:args [:keyword], :ret :any}}}},
                                        potatoclient.logging {init! {:arities {0 {:args [], :ret :any}}},
                                                              shutdown! {:arities {0 {:args [], :ret :any}}}},
                                        potatoclient.core {-main {:arities {:varargs {:args [{:op :rest, :spec :any}],
                                                                                      :ret :any,
                                                                                      :min-arity 0}}},
                                                           start-application {:arities {0 {:args [], :ret :any}}},
                                                           shutdown-application {:arities {0 {:args [], :ret :any}}}},
                                        potatoclient.ui.control-panel {create-stream-button {:arities {2 {:args [:keyword
                                                                                                                 :string],
                                                                                                          :ret :any}}},
                                                                       toggle-stream {:arities {2 {:args [:keyword :any],
                                                                                                   :ret :any}}},
                                                                       create-control-button {:arities {3 {:args [:keyword
                                                                                                                  :string
                                                                                                                  :any],
                                                                                                           :ret :any}}},
                                                                       create-gimbal-controls {:arities {0 {:args [],
                                                                                                            :ret :any}}},
                                                                       create-control-panel {:arities {0 {:args [],
                                                                                                          :ret :any}}},
                                                                       create {:arities {0 {:args [], :ret :any}}}},
                                        potatoclient.state.streams {get-stream {:arities {1 {:args [:keyword],
                                                                                             :ret {:op :keys,
                                                                                                   :req {:process :any,
                                                                                                         :writer :any,
                                                                                                         :stdout-reader :any,
                                                                                                         :stderr-reader :any,
                                                                                                         :output-chan :any,
                                                                                                         :stream-id :string,
                                                                                                         :state :any},
                                                                                                   :nilable true}}}},
                                                                    set-stream! {:arities {2 {:args [:keyword
                                                                                                     {:op :keys,
                                                                                                      :req {:process :any,
                                                                                                            :writer :any,
                                                                                                            :stdout-reader :any,
                                                                                                            :stderr-reader :any,
                                                                                                            :output-chan :any,
                                                                                                            :stream-id :string,
                                                                                                            :state :any}}],
                                                                                              :ret :any}}},
                                                                    clear-stream! {:arities {1 {:args [:keyword],
                                                                                                :ret :any}}},
                                                                    all-streams {:arities {0 {:args [], :ret :map}}}}}}}}
