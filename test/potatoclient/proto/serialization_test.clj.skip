(ns potatoclient.proto.serialization-test
  "Tests for protobuf serialization/deserialization integrity"
  (:require [clojure.test :refer [deftest testing is]]
            [malli.generator :as mg]
            [potatoclient.proto :as proto]
            [potatoclient.state.schemas :as schemas]))

;; ============================================================================
;; Helper Functions
;; ============================================================================

(defn deep-compare
  "Deep comparison of two maps, handling floating point precision"
  [expected actual path]
  (cond
    ;; Both nil
    (and (nil? expected) (nil? actual)) true
    
    ;; One nil
    (or (nil? expected) (nil? actual))
    (do (println "Nil mismatch at" path "- expected:" expected "actual:" actual)
        false)
    
    ;; Maps
    (and (map? expected) (map? actual))
    (let [all-keys (set (concat (keys expected) (keys actual)))]
      (every? (fn [k]
                (deep-compare (get expected k) (get actual k) (conj path k)))
              all-keys))
    
    ;; Vectors/sequences
    (and (sequential? expected) (sequential? actual))
    (and (= (count expected) (count actual))
         (every? identity
                (map-indexed (fn [i [e a]]
                              (deep-compare e a (conj path i)))
                            (map vector expected actual))))
    
    ;; Floating point numbers
    (and (float? expected) (float? actual))
    (< (Math/abs (- expected actual)) 0.0001)
    
    (and (double? expected) (double? actual))
    (< (Math/abs (- expected actual)) 0.0001)
    
    ;; Everything else
    :else
    (if (= expected actual)
      true
      (do (println "Mismatch at" path "- expected:" expected "actual:" actual)
          false))))

;; ============================================================================
;; Serialization Tests
;; ============================================================================

(deftest test-individual-subsystem-roundtrip
  (testing "Individual subsystem serialization roundtrip"
    (doseq [[subsystem-key schema] [[:system schemas/system-schema]
                                    [:gps schemas/gps-schema]
                                    [:compass schemas/compass-schema]
                                    [:lrf schemas/lrf-schema]
                                    [:rotary schemas/rotary-schema]
                                    [:camera-day schemas/camera-day-schema]
                                    [:camera-heat schemas/camera-heat-schema]
                                    [:time schemas/time-schema]
                                    [:rec-osd schemas/rec-osd-schema]]]
      (testing (str "Testing " (name subsystem-key))
        (dotimes [_ 10] ; Test multiple generated values
          (let [;; Generate data
                original-data (mg/generate schema {:seed (rand-int 10000)})
                ;; Create state with single subsystem
                state {:protocol-version 1
                       subsystem-key original-data}
                ;; Serialize and deserialize
                serialized (proto/serialize-state state)
                deserialized (proto/deserialize-state serialized)
                ;; Extract subsystem data
                roundtrip-data (get deserialized subsystem-key)]
            
            ;; Verify structure
            (is (some? serialized) "Serialization should succeed")
            (is (bytes? serialized) "Should produce byte array")
            (is (pos? (count serialized)) "Should have content")
            
            ;; Verify roundtrip
            (is (deep-compare original-data roundtrip-data [subsystem-key])
                (str "Roundtrip failed for " (name subsystem-key)))))))))

(deftest test-full-state-roundtrip
  (testing "Full state with all subsystems"
    (let [;; Generate complete state
          original-state {:protocol-version 1
                         :system (mg/generate schemas/system-schema)
                         :gps (mg/generate schemas/gps-schema)
                         :compass (mg/generate schemas/compass-schema)
                         :lrf (mg/generate schemas/lrf-schema)
                         :rotary (mg/generate schemas/rotary-schema)
                         :camera-day (mg/generate schemas/camera-day-schema)
                         :camera-heat (mg/generate schemas/camera-heat-schema)
                         :compass-calibration (mg/generate schemas/compass-calibration-schema)
                         :time (mg/generate schemas/time-schema)
                         :rec-osd (mg/generate schemas/rec-osd-schema)
                         :day-cam-glass-heater (mg/generate schemas/day-cam-glass-heater-schema)
                         :actual-space-time (mg/generate schemas/actual-space-time-schema)}
          ;; Serialize and deserialize
          serialized (proto/serialize-state original-state)
          deserialized (proto/deserialize-state serialized)]
      
      ;; Verify all subsystems
      (doseq [k (keys original-state)]
        (when (not= k :protocol-version)
          (is (deep-compare (get original-state k) (get deserialized k) [k])
              (str "Subsystem " k " failed roundtrip")))))))

(deftest test-edge-cases
  (testing "Edge case values"
    ;; GPS with extreme values
    (let [gps-extreme {:latitude 90.0
                      :longitude -180.0
                      :altitude 8848.86
                      :manual-latitude -90.0
                      :manual-longitude 180.0
                      :manual-altitude -433.0
                      :fix-type :rtk-fix
                      :use-manual true}
          state {:protocol-version 1 :gps gps-extreme}
          roundtrip (proto/deserialize-state (proto/serialize-state state))]
      (is (deep-compare gps-extreme (:gps roundtrip) [:gps])
          "GPS extreme values should roundtrip"))
    
    ;; Empty/nil subsystems
    (let [sparse-state {:protocol-version 1
                       :system nil
                       :gps (mg/generate schemas/gps-schema)
                       :compass nil}
          roundtrip (proto/deserialize-state (proto/serialize-state sparse-state))]
      (is (nil? (:system roundtrip)) "Nil system should remain nil")
      (is (some? (:gps roundtrip)) "GPS should be preserved")
      (is (nil? (:compass roundtrip)) "Nil compass should remain nil"))))

(deftest test-binary-stability
  (testing "Binary representation stability"
    (let [state {:protocol-version 1
                 :gps {:latitude 45.5
                       :longitude -73.6
                       :altitude 100.0
                       :manual-latitude 0.0
                       :manual-longitude 0.0
                       :manual-altitude 0.0
                       :fix-type :3d-fix
                       :use-manual false}}
          ;; Serialize multiple times
          binary1 (proto/serialize-state state)
          binary2 (proto/serialize-state state)]
      
      ;; Should produce identical binary
      (is (= (seq binary1) (seq binary2))
          "Same data should produce identical binary"))))

(deftest test-large-state
  (testing "Large state with many subsystems"
    (dotimes [_ 5]
      (let [;; Generate state with random subset of subsystems
            subsystems (take (+ 3 (rand-int 8))
                           (shuffle [:system :gps :compass :lrf :rotary
                                    :camera-day :camera-heat :time :rec-osd]))
            state (reduce (fn [s k]
                           (assoc s k (mg/generate 
                                      (case k
                                        :system schemas/system-schema
                                        :gps schemas/gps-schema
                                        :compass schemas/compass-schema
                                        :lrf schemas/lrf-schema
                                        :rotary schemas/rotary-schema
                                        :camera-day schemas/camera-day-schema
                                        :camera-heat schemas/camera-heat-schema
                                        :time schemas/time-schema
                                        :rec-osd schemas/rec-osd-schema))))
                         {:protocol-version 1}
                         subsystems)
            ;; Roundtrip
            serialized (proto/serialize-state state)
            deserialized (proto/deserialize-state serialized)]
        
        ;; Verify all included subsystems
        (doseq [k subsystems]
          (is (deep-compare (get state k) (get deserialized k) [k])
              (str "Subsystem " k " failed in large state")))))))