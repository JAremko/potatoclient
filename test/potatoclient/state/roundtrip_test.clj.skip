(ns potatoclient.state.roundtrip-test
  "Comprehensive roundtrip tests for state serialization/deserialization.
  
  Tests the full pipeline:
  1. Generate data from Malli schemas
  2. Serialize to protobuf
  3. Simulate WebSocket delivery
  4. Verify state dispatch and atom updates"
  (:require [clojure.test :refer [deftest testing is use-fixtures]]
            [clojure.core.async :as async :refer [<! >! go chan timeout close!]]
            [malli.core :as m]
            [malli.generator :as mg]
            [potatoclient.proto :as proto]
            [potatoclient.state.dispatch :as dispatch]
            [potatoclient.state.device :as device]
            [potatoclient.state.schemas :as schemas]))

;; ============================================================================
;; Test Fixtures
;; ============================================================================

(defn reset-state-fixture
  "Reset all state before and after tests"
  [f]
  (device/reset-all-states!)
  (dispatch/enable-validation! true)  ; Enable validation for tests
  (dispatch/enable-debug! false)
  ;; Clear shadow state
  (.clear @#'dispatch/shadow-state)
  (f)
  (device/reset-all-states!)
  (dispatch/dispose!))

(use-fixtures :each reset-state-fixture)

;; ============================================================================
;; Mock WebSocket
;; ============================================================================

(defn create-mock-websocket
  "Create a mock WebSocket that delivers binary messages via core.async channel"
  []
  (let [ws-channel (chan 100)]
    {:channel ws-channel
     :send! (fn [binary-data]
              (go (>! ws-channel binary-data)))
     :close! (fn []
               (close! ws-channel))}))

(defn simulate-websocket-handler
  "Simulate the WebSocket message handler that would call dispatch"
  [ws-mock]
  (go-loop []
    (when-let [binary-data (<! (:channel ws-mock))]
      ;; This simulates what the IPC/WebSocket handler would do
      (dispatch/handle-binary-state binary-data)
      (recur))))

;; ============================================================================
;; Schema-based Data Generation
;; ============================================================================

(defn generate-subsystem-data
  "Generate valid data for a subsystem using its Malli schema"
  [schema]
  (mg/generate schema {:seed (rand-int 10000)}))

(defn generate-full-state
  "Generate a complete JonGUIState with some subsystems populated"
  [& {:keys [include-all?] :or {include-all? false}}]
  (let [base-state {:protocol-version 1}
        ;; Randomly include subsystems or include all if specified
        subsystems (if include-all?
                    [:system :gps :compass :lrf :rotary :camera-day :camera-heat
                     :compass-calibration :time :rec-osd :day-cam-glass-heater
                     :actual-space-time :meteo-internal]
                    (take (+ 2 (rand-int 5))
                          (shuffle [:system :gps :compass :lrf :rotary 
                                   :camera-day :camera-heat])))]
    (reduce (fn [state subsystem]
              (assoc state subsystem
                     (case subsystem
                       :system (generate-subsystem-data schemas/system-schema)
                       :gps (generate-subsystem-data schemas/gps-schema)
                       :compass (generate-subsystem-data schemas/compass-schema)
                       :lrf (generate-subsystem-data schemas/lrf-schema)
                       :rotary (generate-subsystem-data schemas/rotary-schema)
                       :camera-day (generate-subsystem-data schemas/camera-day-schema)
                       :camera-heat (generate-subsystem-data schemas/camera-heat-schema)
                       :compass-calibration (generate-subsystem-data schemas/compass-calibration-schema)
                       :time (generate-subsystem-data schemas/time-schema)
                       :rec-osd (generate-subsystem-data schemas/rec-osd-schema)
                       :day-cam-glass-heater (generate-subsystem-data schemas/day-cam-glass-heater-schema)
                       :actual-space-time (generate-subsystem-data schemas/actual-space-time-schema)
                       :meteo-internal (generate-subsystem-data schemas/meteo-schema))))
            base-state
            subsystems)))

;; ============================================================================
;; Helper Functions
;; ============================================================================

(defn wait-for-atom-update
  "Wait for an atom to have a non-nil value or timeout"
  [atom-ref timeout-ms]
  (let [start (System/currentTimeMillis)]
    (loop []
      (if (some? @atom-ref)
        true
        (if (> (- (System/currentTimeMillis) start) timeout-ms)
          false
          (do
            (Thread/sleep 10)
            (recur)))))))

;; ============================================================================
;; Roundtrip Tests
;; ============================================================================

(deftest test-basic-roundtrip
  (testing "Basic roundtrip: generate -> serialize -> websocket -> dispatch -> atoms"
    (let [ws-mock (create-mock-websocket)
          handler (simulate-websocket-handler ws-mock)
          ;; Generate test data
          test-state (generate-full-state)
          ;; Serialize to protobuf
          binary-data (proto/serialize-state test-state)]
      
      ;; Send via mock WebSocket
      ((:send! ws-mock) binary-data)
      
      ;; Wait for processing
      (Thread/sleep 50)
      
      ;; Verify atoms were updated
      (when (:system test-state)
        (is (= (:system test-state) @device/system-state) 
            "System state should match generated data"))
      (when (:gps test-state)
        (is (= (:gps test-state) @device/gps-state)
            "GPS state should match generated data"))
      (when (:compass test-state)
        (is (= (:compass test-state) @device/compass-state)
            "Compass state should match generated data"))
      
      ;; Cleanup
      ((:close! ws-mock))
      (<! handler))))

(deftest test-multiple-messages
  (testing "Multiple WebSocket messages with state changes"
    (let [ws-mock (create-mock-websocket)
          handler (simulate-websocket-handler ws-mock)
          ;; Generate initial state with GPS
          initial-state (assoc (generate-full-state) 
                             :gps (generate-subsystem-data schemas/gps-schema))
          initial-gps (:gps initial-state)
          ;; Create updated state with different GPS latitude
          updated-state (assoc-in initial-state [:gps :latitude] 
                                 (if (> (:latitude initial-gps) 0) -45.0 45.0))]
      
      ;; Send initial state
      ((:send! ws-mock) (proto/serialize-state initial-state))
      (Thread/sleep 50)
      
      ;; Verify initial GPS
      (is (= initial-gps @device/gps-state) "Initial GPS should be set")
      
      ;; Send updated state
      ((:send! ws-mock) (proto/serialize-state updated-state))
      (Thread/sleep 50)
      
      ;; Verify GPS was updated
      (is (= (:gps updated-state) @device/gps-state) "GPS should be updated")
      (is (not= initial-gps @device/gps-state) "GPS should have changed")
      
      ;; Cleanup
      ((:close! ws-mock))
      (<! handler))))

(deftest test-validation-roundtrip
  (testing "Roundtrip with validation enabled"
    (dispatch/enable-validation! true)
    (let [ws-mock (create-mock-websocket)
          handler (simulate-websocket-handler ws-mock)
          ;; Generate valid state
          valid-state (generate-full-state :include-all? false)
          ;; Create invalid state (latitude out of range)
          invalid-state (-> valid-state
                           (assoc :gps {:latitude 200.0  ; Invalid!
                                       :longitude 0.0
                                       :altitude 0.0
                                       :manual-latitude 0.0
                                       :manual-longitude 0.0
                                       :manual-altitude 0.0
                                       :fix-type :no-fix
                                       :use-manual false}))]
      
      ;; Send valid state
      ((:send! ws-mock) (proto/serialize-state valid-state))
      (Thread/sleep 50)
      
      ;; Should be accepted
      (when (:gps valid-state)
        (is (some? @device/gps-state) "Valid GPS should be accepted"))
      
      ;; Clear GPS state
      (reset! device/gps-state nil)
      
      ;; Send invalid state
      ((:send! ws-mock) (proto/serialize-state invalid-state))
      (Thread/sleep 50)
      
      ;; Should be rejected
      (is (nil? @device/gps-state) "Invalid GPS should be rejected by validation")
      
      ;; Cleanup
      ((:close! ws-mock))
      (<! handler))))

(deftest test-stress-roundtrip
  (testing "Stress test with many rapid messages"
    (let [ws-mock (create-mock-websocket)
          handler (simulate-websocket-handler ws-mock)
          message-count 100
          sent-states (atom [])]
      
      ;; Send many messages rapidly
      (dotimes [i message-count]
        (let [state (generate-full-state)]
          (swap! sent-states conj state)
          ((:send! ws-mock) (proto/serialize-state state))))
      
      ;; Wait for processing
      (Thread/sleep 500)
      
      ;; The last state should be in the atoms
      (let [last-state (last @sent-states)]
        (when (:system last-state)
          (is (= (:system last-state) @device/system-state)
              "Last system state should be in atom"))
        (when (:gps last-state)
          (is (= (:gps last-state) @device/gps-state)
              "Last GPS state should be in atom")))
      
      ;; Cleanup
      ((:close! ws-mock))
      (<! handler))))

(deftest test-channel-distribution
  (testing "State changes are distributed via channel"
    (let [ws-mock (create-mock-websocket)
          handler (simulate-websocket-handler ws-mock)
          state-channel (dispatch/get-state-channel)
          received-states (atom [])
          ;; Listen to state channel
          listener (go-loop []
                    (when-let [state (<! state-channel)]
                      (swap! received-states conj state)
                      (recur)))]
      
      ;; Send several states
      (dotimes [i 3]
        (let [state (generate-full-state)]
          ((:send! ws-mock) (proto/serialize-state state))
          (Thread/sleep 50)))
      
      ;; Wait for channel distribution
      (Thread/sleep 100)
      
      ;; Should have received states via channel
      (is (= 3 (count @received-states))
          "Should receive all states via channel")
      
      ;; Cleanup
      ((:close! ws-mock))
      (<! handler)
      (close! listener))))

(deftest test-shadow-state-efficiency
  (testing "Shadow state prevents redundant atom updates"
    (let [ws-mock (create-mock-websocket)
          handler (simulate-websocket-handler ws-mock)
          ;; Generate a state
          test-state (generate-full-state)
          binary-data (proto/serialize-state test-state)
          ;; Track atom resets
          reset-count (atom 0)
          original-reset! reset!]
      
      (with-redefs [reset! (fn [a v]
                            (when (#{device/system-state device/gps-state 
                                    device/compass-state device/lrf-state
                                    device/rotary-state} a)
                              (swap! reset-count inc))
                            (original-reset! a v))]
        
        ;; First send - should update atoms
        ((:send! ws-mock) binary-data)
        (Thread/sleep 50)
        
        (let [first-count @reset-count]
          (is (pos? first-count) "Should update atoms on first message")
          
          ;; Send same data again
          ((:send! ws-mock) binary-data)
          (Thread/sleep 50)
          
          ;; Should not update atoms (shadow state optimization)
          (is (= first-count @reset-count)
              "Should not update atoms for identical data")))
      
      ;; Cleanup
      ((:close! ws-mock))
      (<! handler))))

(deftest test-partial-state-updates
  (testing "Partial state updates only affect changed subsystems"
    (let [ws-mock (create-mock-websocket)
          handler (simulate-websocket-handler ws-mock)
          ;; Create initial state with multiple subsystems
          initial-state (-> (generate-full-state)
                           (assoc :system (generate-subsystem-data schemas/system-schema))
                           (assoc :gps (generate-subsystem-data schemas/gps-schema))
                           (assoc :compass (generate-subsystem-data schemas/compass-schema)))]
      
      ;; Send initial state
      ((:send! ws-mock) (proto/serialize-state initial-state))
      (Thread/sleep 50)
      
      ;; Verify all subsystems set
      (is (= (:system initial-state) @device/system-state))
      (is (= (:gps initial-state) @device/gps-state))
      (is (= (:compass initial-state) @device/compass-state))
      
      ;; Update only GPS
      (let [updated-state (assoc initial-state 
                                :gps (generate-subsystem-data schemas/gps-schema))]
        ((:send! ws-mock) (proto/serialize-state updated-state))
        (Thread/sleep 50)
        
        ;; Only GPS should change
        (is (= (:system initial-state) @device/system-state)
            "System should remain unchanged")
        (is (= (:gps updated-state) @device/gps-state)
            "GPS should be updated")
        (is (= (:compass initial-state) @device/compass-state)
            "Compass should remain unchanged"))
      
      ;; Cleanup
      ((:close! ws-mock))
      (<! handler))))