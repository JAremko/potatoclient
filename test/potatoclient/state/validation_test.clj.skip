(ns potatoclient.state.validation-test
  "Tests for state validation and schema conformance.
  
  Since the client only deserializes state (doesn't serialize it),
  we test that our schemas correctly validate various state data patterns."
  (:require [clojure.test :refer [deftest testing is]]
            [malli.core :as m]
            [malli.generator :as mg]
            [potatoclient.state.schemas :as schemas]
            [potatoclient.state.device :as device]))

;; ============================================================================
;; Schema Validation Tests
;; ============================================================================

(deftest test-gps-schema-validation
  (testing "GPS schema validates correct data"
    (let [valid-gps {:longitude 45.5
                     :latitude 23.7
                     :altitude 1000.0
                     :manual-longitude -120.3
                     :manual-latitude -45.2
                     :manual-altitude 500.0
                     :fix-type "JON_GUI_DATA_GPS_FIX_TYPE_3D"
                     :use-manual false}]
      (is (m/validate schemas/gps-schema valid-gps))))
  
  (testing "GPS schema rejects invalid latitude"
    (let [invalid-gps {:longitude 45.5
                       :latitude 91.0 ; > 90
                       :altitude 1000.0
                       :manual-longitude -120.3
                       :manual-latitude -45.2
                       :manual-altitude 500.0
                       :fix-type "JON_GUI_DATA_GPS_FIX_TYPE_3D"
                       :use-manual false}]
      (is (not (m/validate schemas/gps-schema invalid-gps)))))
  
  (testing "GPS schema rejects invalid longitude"
    (let [invalid-gps {:longitude 181.0 ; > 180
                       :latitude 45.0
                       :altitude 1000.0
                       :manual-longitude -120.3
                       :manual-latitude -45.2
                       :manual-altitude 500.0
                       :fix-type "JON_GUI_DATA_GPS_FIX_TYPE_3D"
                       :use-manual false}]
      (is (not (m/validate schemas/gps-schema invalid-gps)))))
  
  (testing "GPS schema rejects invalid fix type"
    (let [invalid-gps {:longitude 45.5
                       :latitude 23.7
                       :altitude 1000.0
                       :manual-longitude -120.3
                       :manual-latitude -45.2
                       :manual-altitude 500.0
                       :fix-type "JON_GUI_DATA_GPS_FIX_TYPE_UNSPECIFIED" ; Not allowed
                       :use-manual false}]
      (is (not (m/validate schemas/gps-schema invalid-gps))))))

(deftest test-compass-schema-validation
  (testing "Compass schema validates correct data"
    (let [valid-compass {:azimuth 180.0
                         :elevation 45.0
                         :bank 30.0
                         :offset-azimuth 10.0
                         :offset-elevation -5.0
                         :magnetic-declination 7.5
                         :calibrating false}]
      (is (m/validate schemas/compass-schema valid-compass))))
  
  (testing "Compass schema rejects invalid azimuth"
    (let [invalid-compass {:azimuth 360.0 ; >= 360
                           :elevation 45.0
                           :bank 30.0
                           :offset-azimuth 10.0
                           :offset-elevation -5.0
                           :magnetic-declination 7.5
                           :calibrating false}]
      (is (not (m/validate schemas/compass-schema invalid-compass)))))
  
  (testing "Compass schema rejects invalid elevation"
    (let [invalid-compass {:azimuth 180.0
                           :elevation 91.0 ; > 90
                           :bank 30.0
                           :offset-azimuth 10.0
                           :offset-elevation -5.0
                           :magnetic-declination 7.5
                           :calibrating false}]
      (is (not (m/validate schemas/compass-schema invalid-compass))))))

(deftest test-system-schema-validation
  (testing "System schema validates correct data"
    (let [valid-system {:cpu-temperature 45.5
                        :gpu-temperature 55.0
                        :gpu-load 75.0
                        :cpu-load 50.0
                        :power-consumption 250.0
                        :loc "JON_GUI_DATA_SYSTEM_LOCALIZATION_EN"
                        :cur-video-rec-dir-year 2024
                        :cur-video-rec-dir-month 3
                        :cur-video-rec-dir-day 15
                        :cur-video-rec-dir-hour 14
                        :cur-video-rec-dir-minute 30
                        :cur-video-rec-dir-second 45
                        :rec-enabled true
                        :important-rec-enabled false
                        :low-disk-space false
                        :no-disk-space false
                        :disk-space 85
                        :tracking false
                        :vampire-mode false
                        :stabilization-mode true
                        :geodesic-mode false
                        :cv-dumping false}]
      (is (m/validate schemas/system-schema valid-system))))
  
  (testing "System schema rejects invalid temperature"
    (let [invalid-system (assoc (mg/generate schemas/system-schema {:size 5 :seed 1})
                               :cpu-temperature -300.0)] ; < -273.15
      (is (not (m/validate schemas/system-schema invalid-system)))))
  
  (testing "System schema rejects invalid disk space"
    (let [invalid-system (assoc (mg/generate schemas/system-schema {:size 5 :seed 2})
                               :disk-space 101)] ; > 100
      (is (not (m/validate schemas/system-schema invalid-system))))))

(deftest test-camera-schemas
  (testing "Day camera schema validates correct data"
    (let [valid-day-cam {:focus-pos 0.5
                         :zoom-pos 0.75
                         :iris-pos 0.3
                         :infrared-filter true
                         :zoom-table-pos 10
                         :zoom-table-pos-max 100
                         :fx-mode "JON_GUI_DATA_FX_MODE_DAY_A"
                         :auto-focus true
                         :auto-iris false
                         :digital-zoom-level 2.5
                         :clahe-level 0.6}]
      (is (m/validate schemas/camera-day-schema valid-day-cam))))
  
  (testing "Heat camera schema validates correct data"
    (let [valid-heat-cam {:zoom-pos 0.5
                          :agc-mode "JON_GUI_DATA_VIDEO_CHANNEL_HEAT_AGC_MODE_2"
                          :filter "JON_GUI_DATA_VIDEO_CHANNEL_HEAT_FILTER_HOT_WHITE"
                          :auto-focus false
                          :zoom-table-pos 5
                          :zoom-table-pos-max 50
                          :dde-level 256
                          :dde-enabled true
                          :fx-mode "JON_GUI_DATA_FX_MODE_HEAT_B"
                          :digital-zoom-level 1.5
                          :clahe-level 0.4}]
      (is (m/validate schemas/camera-heat-schema valid-heat-cam)))))

(deftest test-normalized-value-constraints
  (testing "Normalized values must be between 0 and 1"
    (is (m/validate schemas/normalized-value 0.0))
    (is (m/validate schemas/normalized-value 0.5))
    (is (m/validate schemas/normalized-value 1.0))
    (is (not (m/validate schemas/normalized-value -0.1)))
    (is (not (m/validate schemas/normalized-value 1.1)))))

(deftest test-angle-constraints
  (testing "Azimuth angles must be [0, 360)"
    (is (m/validate schemas/angle-azimuth 0.0))
    (is (m/validate schemas/angle-azimuth 180.0))
    (is (m/validate schemas/angle-azimuth 359.999))
    (is (not (m/validate schemas/angle-azimuth 360.0)))
    (is (not (m/validate schemas/angle-azimuth -1.0))))
  
  (testing "Elevation angles must be [-90, 90]"
    (is (m/validate schemas/angle-elevation -90.0))
    (is (m/validate schemas/angle-elevation 0.0))
    (is (m/validate schemas/angle-elevation 90.0))
    (is (not (m/validate schemas/angle-elevation -91.0)))
    (is (not (m/validate schemas/angle-elevation 91.0)))))

(deftest test-enum-constraints
  (testing "GPS fix type enum validation"
    (is (m/validate schemas/gps-fix-type "JON_GUI_DATA_GPS_FIX_TYPE_3D"))
    (is (m/validate schemas/gps-fix-type "JON_GUI_DATA_GPS_FIX_TYPE_MANUAL"))
    (is (not (m/validate schemas/gps-fix-type "JON_GUI_DATA_GPS_FIX_TYPE_UNSPECIFIED")))
    (is (not (m/validate schemas/gps-fix-type "INVALID_TYPE"))))
  
  (testing "System localization enum validation"
    (is (m/validate schemas/system-localization "JON_GUI_DATA_SYSTEM_LOCALIZATION_EN"))
    (is (m/validate schemas/system-localization "JON_GUI_DATA_SYSTEM_LOCALIZATION_UA"))
    (is (not (m/validate schemas/system-localization "JON_GUI_DATA_SYSTEM_LOCALIZATION_UNSPECIFIED")))))

(deftest test-generated-data-validation
  (testing "All generated data should be valid"
    (doseq [[subsystem-key schema] schemas/all-schemas]
      (testing (str "Generated " (name subsystem-key) " data")
        (let [generated (mg/generate schema {:size 10 :seed 42})]
          (is (m/validate schema generated)
              (str "Generated " (name subsystem-key) " should be valid")))))))

(deftest test-validate-and-set-function
  (testing "validate-and-set! accepts valid data"
    (is (device/validate-and-set! :gps {:longitude 45.5
                                        :latitude 23.7
                                        :altitude 1000.0
                                        :manual-longitude -120.3
                                        :manual-latitude -45.2
                                        :manual-altitude 500.0
                                        :fix-type "JON_GUI_DATA_GPS_FIX_TYPE_3D"
                                        :use-manual false})))
  
  (testing "validate-and-set! rejects invalid data"
    (is (not (device/validate-and-set! :gps {:longitude 181.0 ; Invalid
                                             :latitude 23.7
                                             :altitude 1000.0
                                             :manual-longitude -120.3
                                             :manual-latitude -45.2
                                             :manual-altitude 500.0
                                             :fix-type "JON_GUI_DATA_GPS_FIX_TYPE_3D"
                                             :use-manual false}))))
  
  (testing "validate-and-set! accepts nil"
    (is (device/validate-and-set! :gps nil))))

;; ============================================================================
;; Edge Case Tests
;; ============================================================================

(deftest test-edge-case-values
  (testing "GPS altitude edge cases"
    (is (m/validate schemas/gps-altitude -433.0)) ; Dead Sea
    (is (m/validate schemas/gps-altitude 8848.86)) ; Everest
    (is (not (m/validate schemas/gps-altitude -434.0)))
    (is (not (m/validate schemas/gps-altitude 8849.0))))
  
  (testing "Temperature edge cases"
    (is (m/validate schemas/temperature-celsius -273.15)) ; Absolute zero
    (is (m/validate schemas/temperature-celsius 150.0))
    (is (not (m/validate schemas/temperature-celsius -274.0)))
    (is (not (m/validate schemas/temperature-celsius 151.0))))
  
  (testing "RGB color edge cases"
    (is (m/validate schemas/rgb-value 0))
    (is (m/validate schemas/rgb-value 255))
    (is (not (m/validate schemas/rgb-value -1)))
    (is (not (m/validate schemas/rgb-value 256)))))

;; ============================================================================
;; Complex Schema Tests
;; ============================================================================

(deftest test-complex-schemas
  (testing "RGB color schema"
    (let [valid-color {:red 255 :green 128 :blue 0}]
      (is (m/validate schemas/rgb-color-schema valid-color))))
  
  (testing "Scan node schema"
    (let [valid-node {:index 0
                      :day-zoom-table-value 10
                      :heat-zoom-table-value 5
                      :azimuth 180.0
                      :elevation 45.0
                      :linger 2.5
                      :speed 0.5}]
      (is (m/validate schemas/scan-node-schema valid-node))))
  
  (testing "Target schema with nested color"
    (let [valid-target {:timestamp 1234567890
                        :target-longitude 45.5
                        :target-latitude 23.7
                        :target-altitude 1000.0
                        :observer-longitude -120.3
                        :observer-latitude -45.2
                        :observer-altitude 500.0
                        :observer-azimuth 270.0
                        :observer-elevation 15.0
                        :observer-bank 0.0
                        :distance-2d 10000.0
                        :distance-3b 10050.0
                        :observer-fix-type "JON_GUI_DATA_GPS_FIX_TYPE_3D"
                        :session-id 1
                        :target-id 42
                        :target-color {:red 255 :green 0 :blue 0}
                        :type 1
                        :uuid-part1 123
                        :uuid-part2 456
                        :uuid-part3 789
                        :uuid-part4 101112}]
      (is (m/validate schemas/target-schema valid-target)))))