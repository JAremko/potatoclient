(ns potatoclient.state.proto-bridge-simple-test
  "Simple tests for proto-bridge without complex state structures"
  (:require [clojure.test :refer [deftest testing is]]
            [potatoclient.state.proto-bridge :as bridge]
            [potatoclient.proto :as proto])
  (:import (ser JonSharedData$JonGUIState)))

(deftest test-basic-roundtrip
  (testing "Basic protobuf object to EDN"
    ;; Create a simple protobuf state manually
    (let [builder (JonSharedData$JonGUIState/newBuilder)
          _ (.setProtocolVersion builder 1)
          proto-msg (.build builder)
          ;; Convert to EDN
          edn-state (bridge/proto-msg->edn-state proto-msg)]
      (is (map? edn-state))
      (is (= 1 (:protocol-version edn-state)))))

  (testing "Binary to EDN for empty state"
    ;; Create empty state binary
    (let [builder (JonSharedData$JonGUIState/newBuilder)
          proto-msg (.build builder)
          binary (.toByteArray proto-msg)]
      ;; Empty protobuf has 0 bytes
      (is (zero? (count binary)))
      ;; So binary->edn-state should return nil for empty binary
      (is (nil? (bridge/binary->edn-state binary)))))

  (testing "Empty binary returns nil"
    (is (nil? (bridge/binary->edn-state (byte-array 0))))
    (is (nil? (bridge/binary->edn-state (byte-array [])))))

  (testing "Invalid binary returns nil"
    (is (nil? (bridge/binary->edn-state (byte-array [1 2 3]))))))

(deftest test-subsystem-extraction
  (testing "Extract subsystem from protobuf with system data"
    (let [builder (JonSharedData$JonGUIState/newBuilder)
          system-builder (.getSystemBuilder builder)
          _ (doto system-builder
              (.setCpuTemperature 45.0))
          proto-msg (.build builder)
          ;; Extract just system
          system-data (bridge/extract-subsystem-edn proto-msg :system)]
      (is (map? system-data))
      (is (= 45.0 (:cpu-temperature system-data)))))

  (testing "Extract non-existent subsystem returns nil"
    (let [builder (JonSharedData$JonGUIState/newBuilder)
          proto-msg (.build builder)]
      (is (nil? (bridge/extract-subsystem-edn proto-msg :gps)))
      (is (nil? (bridge/extract-subsystem-edn proto-msg :time))))))

(deftest test-has-subsystem
  (testing "Check subsystem presence"
    (let [builder (JonSharedData$JonGUIState/newBuilder)
          _ (.getSystemBuilder builder) ; This creates an empty system
          proto-msg (.build builder)]
      (is (bridge/has-subsystem? proto-msg :system))
      (is (not (bridge/has-subsystem? proto-msg :gps)))
      (is (not (bridge/has-subsystem? proto-msg :unknown-subsystem))))))

(deftest test-change-detection
  (testing "Simple change detection"
    (is (bridge/changed? nil {:a 1}))
    (is (bridge/changed? {:a 1} nil))
    (is (bridge/changed? {:a 1} {:a 2}))
    (is (not (bridge/changed? {:a 1} {:a 1})))
    (is (not (bridge/changed? nil nil)))))

(deftest test-parse-gui-state
  (testing "Parse valid binary"
    (let [builder (JonSharedData$JonGUIState/newBuilder)
          _ (.setProtocolVersion builder 42)
          binary (.toByteArray (.build builder))
          parsed (bridge/parse-gui-state binary)]
      (is (instance? JonSharedData$JonGUIState parsed))
      (is (= 42 (.getProtocolVersion parsed)))))

  (testing "Parse invalid binary returns nil"
    (is (nil? (bridge/parse-gui-state (byte-array [1 2 3]))))))