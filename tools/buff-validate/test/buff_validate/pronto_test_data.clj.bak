(ns buff-validate.pronto-test-data
  "Test data using Pronto for message creation"
  (:require [pronto.core :as pronto]))

;; Define mappers for the message types
(pronto/defmapper cmd-mapper [cmd.JonSharedCmd$Root])
(pronto/defmapper state-mapper [ser.JonSharedData$JonGUIState])

;; ============================================================================
;; Command Messages using Pronto
;; ============================================================================

(def ping-cmd-edn
  {:cmd.JonSharedCmd$Root
   {:protocol-version 1
    :session-id 1000
    :client-type :jon-gui-data-client-type-local-network
    :ping {:cmd.JonSharedCmd$Ping {}}}})

(def noop-cmd-edn
  {:cmd.JonSharedCmd$Root
   {:protocol-version 1
    :session-id 2000
    :client-type :jon-gui-data-client-type-local-network
    :noop {:cmd.JonSharedCmd$Noop {}}}})

(def frozen-cmd-edn
  {:cmd.JonSharedCmd$Root
   {:protocol-version 1
    :session-id 3000
    :client-type :jon-gui-data-client-type-local-network
    :frozen {:cmd.JonSharedCmd$Frozen {}}}})

;; Invalid command with client-type = 0 (should fail validation)
(def invalid-client-type-cmd-edn
  {:cmd.JonSharedCmd$Root
   {:protocol-version 1
    :session-id 4000
    :client-type :jon-gui-data-client-type-unspecified  ; This is 0, which is not allowed
    :ping {:cmd.JonSharedCmd$Ping {}}}})

;; Invalid command with protocol-version = 0 (should fail validation)
(def invalid-protocol-cmd-edn
  {:cmd.JonSharedCmd$Root
   {:protocol-version 0  ; Invalid: should be > 0
    :session-id 5000
    :client-type :jon-gui-data-client-type-local-network
    :ping {:cmd.JonSharedCmd$Ping {}}}})

;; ============================================================================
;; State Messages using Pronto - Based on real state-explorer output
;; ============================================================================

(def minimal-valid-state-edn
  {:ser.JonSharedData$JonGUIState
   {:protocol-version 1
    :time {:ser.JonSharedDataTime$JonGuiDataTime
           {:timestamp 1754664759
            :manual-timestamp 0
            :zone-id 0
            :use-manual-time false}}
    :system {:ser.JonSharedDataSystem$JonGuiDataSystem
             {:cpu-temperature 42.0
              :cpu-load 25.0
              :gpu-temperature 40.0
              :gpu-load 20.0
              :memory-used 1000000
              :memory-total 2000000
              :disk-space 50
              :power-consumption 100.0
              :rec-enabled false
              :low-disk-space false
              :loc :jon-gui-data-system-localization-en}}
    :gps {:ser.JonSharedDataGps$JonGuiDataGps
          {:latitude 50.023632
           :longitude 15.815209999999999
           :altitude 0.289371
           :fix-type :jon-gui-data-gps-fix-type-3d}}
    :compass {:ser.JonSharedDataCompass$JonGuiDataCompass
              {:azimuth 333.50625
               :bank 0.84375
               :elevation 3.54375}}
    :rotary {:ser.JonSharedDataRotaryPlatform$JonGuiDataRotaryPlatform
             {:azimuth 333.50626
              :elevation 7.04
              :mode :jon-gui-data-rotary-mode-position}}
    :camera-day {:ser.JonSharedDataCameraDay$JonGuiDataCameraDay
                 {:zoom-pos 0.59938735
                  :focus-pos 1.0
                  :iris-pos 0.03
                  :digital-zoom-level 1.0
                  :zoom-table-pos 3
                  :zoom-table-pos-max 4
                  :fx-mode :jon-gui-data-fx-mode-day-a
                  :infrared-filter true
                  :clahe-level 0.16}}
    :camera-heat {:ser.JonSharedDataCameraHeat$JonGuiDataCameraHeat
                  {:zoom-table-pos 3
                   :zoom-table-pos-max 4
                   :digital-zoom-level 1.0
                   :fx-mode :jon-gui-data-fx-mode-heat-a
                   :filter :jon-gui-data-video-channel-heat-filter-hot-white
                   :agc-mode :jon-gui-data-video-channel-heat-agc-mode-2
                   :clahe-level 0.5}}
    :day-cam-glass-heater {:ser.JonSharedDataGlassHeater$JonGuiDataGlassHeater {}}
    :meteo-internal {:ser.JonSharedDataMeteoInternal$JonGuiDataMeteoInternal {}}
    :lrf {:ser.JonSharedDataLRF$JonGuiDataLRF
          {:measure-id 52
           :pointer-mode :jon-gui-data-lrf-laser-pointer-mode-off}}
    :compass-calibration {:ser.JonSharedDataCompassCalibration$JonGuiDataCompassCalibration
                          {:status :jon-gui-data-compass-calibrate-status-not-calibrating
                           :final-stage 12}}
    :rec-osd {:ser.JonSharedDataRecOSD$JonGuiDataRecOSD
              {:day-osd-enabled true
               :heat-osd-enabled true
               :screen :jon-gui-data-rec-osd-screen-main}}
    :actual-space-time {:ser.JonSharedDataActualSpaceTime$JonGuiDataActualSpaceTime
                        {:timestamp 1754664759
                         :latitude 50.023632
                         :longitude 15.81521
                         :altitude 0.289371
                         :azimuth 256.62
                         :elevation 7.04}}}})

;; Invalid state with protocol-version = 0
(def invalid-protocol-state-edn
  {:ser.JonSharedData$JonGUIState
   {:protocol-version 0}})  ; Invalid and missing required fields

;; ============================================================================
;; Helper Functions
;; ============================================================================

(defn edn->proto
  "Convert EDN map to protobuf message using appropriate mapper"
  [edn-map]
  (cond
    (contains? edn-map :cmd.JonSharedCmd$Root)
    (pronto/clj-map->proto cmd-mapper edn-map)
    
    (contains? edn-map :ser.JonSharedData$JonGUIState)
    (pronto/clj-map->proto state-mapper edn-map)
    
    :else
    (throw (ex-info "Unknown message type in EDN" {:keys (keys edn-map)}))))

(defn edn->bytes
  "Convert EDN map to protobuf byte array"
  [edn-map]
  (-> edn-map
      edn->proto
      (.toByteArray)))

;; ============================================================================
;; Test Data Getters
;; ============================================================================

(defn get-ping-cmd-bytes []
  (edn->bytes ping-cmd-edn))

(defn get-noop-cmd-bytes []
  (edn->bytes noop-cmd-edn))

(defn get-frozen-cmd-bytes []
  (edn->bytes frozen-cmd-edn))

(defn get-valid-state-bytes []
  (edn->bytes minimal-valid-state-edn))

(defn get-invalid-client-type-cmd-bytes []
  (edn->bytes invalid-client-type-cmd-edn))

(defn get-invalid-protocol-cmd-bytes []
  (edn->bytes invalid-protocol-cmd-edn))

(defn get-invalid-protocol-state-bytes []
  (edn->bytes invalid-protocol-state-edn))