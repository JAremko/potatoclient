(ns potatoclient.config "Configuration management for PotatoClient" (:require [clojure.edn :as edn] [clojure.java.io :as io] [clojure.string :as str] [malli.core :as m] [potatoclient.logging :as logging] [potatoclient.theme :as theme] [potatoclient.ui-specs :as specs]) (:import (java.io File) (java.util Date)))

(def config-file-name "potatoclient-config.edn")

(defn- extract-domain* "Extract domain/IP from various URL formats." #:malli{:schema [:=> [:cat :string] :potatoclient.ui-specs/domain]} [input] (let [cleaned (str/trim input)] (if (and (not (str/includes? cleaned "://")) (not (re-find #"[/?#&:]" cleaned))) cleaned (let [after-protocol (if-let [idx (str/index-of cleaned "://")] (subs cleaned (+ idx 3)) cleaned) domain (if-let [sep-idx (some (fn* [p1__274#] (str/index-of after-protocol p1__274#)) ["/" "?" "#" "&"])] (subs after-protocol 0 sep-idx) after-protocol) domain (if-let [port-idx (str/index-of domain ":")] (subs domain 0 port-idx) domain)] (if (str/blank? domain) cleaned domain)))))

(defn- get-config-dir "Get the configuration directory path using platform-specific conventions" #:malli{:schema [:=> [:cat] :potatoclient.ui-specs/file]} [] (let [os-name (.toLowerCase (System/getProperty "os.name"))] (cond (.contains os-name "win") (let [local-appdata (System/getenv "LOCALAPPDATA") appdata (System/getenv "APPDATA") user-home (System/getProperty "user.home")] (io/file (or local-appdata appdata (str user-home "/AppData/Local")) "PotatoClient")) (.contains os-name "mac") (io/file (System/getProperty "user.home") "Library" "Application Support" "PotatoClient") :else (let [xdg-config (System/getenv "XDG_CONFIG_HOME") user-home (System/getProperty "user.home") config-base (if (and xdg-config (.startsWith xdg-config "/") (not= xdg-config user-home)) xdg-config (io/file user-home ".config"))] (io/file config-base "potatoclient")))))

(defn- get-config-file "Get the configuration file" #:malli{:schema [:=> [:cat] :potatoclient.ui-specs/file]} [] (io/file (get-config-dir) config-file-name))

(defn- ensure-config-dir! "Ensure the configuration directory exists" #:malli{:schema [:=> [:cat] :nil]} [] (let [config-dir (get-config-dir)] (when-not (.exists config-dir) (.mkdirs config-dir))))