(ns proto-tree-printer.core
  "Tool to print the EDN structure of protobuf messages as generated by pronto"
  (:require [clojure.pprint :as pprint]
            [pronto.core :as pronto])
  (:import [cmd JonSharedCmd$Root]
           [ser JonSharedData$JonGUIState]))

;; Define mappers for the protobuf classes
(pronto/defmapper cmd-mapper [JonSharedCmd$Root])
(pronto/defmapper state-mapper [JonSharedData$JonGUIState])

(defn print-cmd-tree []
  "Print the EDN structure for JonSharedCmd$Root as pronto generates it"
  (println "\n=== COMMAND (CMD) ROOT MESSAGE STRUCTURE (PRONTO EDN) ===\n")
  (let [;; Create pronto proto-map using mapper
        proto-map (pronto/proto-map cmd-mapper JonSharedCmd$Root)
        ;; Convert to regular Clojure map
        edn-structure (pronto/proto-map->clj-map proto-map)]
    (pprint/pprint edn-structure)))

(defn print-state-tree []
  "Print the EDN structure for JonSharedData$JonGUIState as pronto generates it"
  (println "\n=== STATE (SER) ROOT MESSAGE STRUCTURE (PRONTO EDN) ===\n")
  (let [;; Create pronto proto-map using mapper
        proto-map (pronto/proto-map state-mapper JonSharedData$JonGUIState)
        ;; Convert to regular Clojure map
        edn-structure (pronto/proto-map->clj-map proto-map)]
    (pprint/pprint edn-structure)))

(defn -main [& args]
  (let [arg (first args)]
    (cond
      (or (nil? arg) (= arg "both")) 
      (do (print-cmd-tree)
          (print-state-tree))
      
      (= arg "cmd") 
      (print-cmd-tree)
      
      (or (= arg "state") (= arg "ser")) 
      (print-state-tree)
      
      :else 
      (do
        (println "Usage: clojure -M -m proto-tree-printer.core [cmd|state|ser|both]")
        (println "  cmd   - Print command root message structure as EDN")
        (println "  state - Print state root message structure as EDN")
        (println "  ser   - Print state root message structure as EDN (alias)")
        (println "  both  - Print both structures (default)")
        (System/exit 1)))))

;; Allow running with clojure -M without -m flag
(when (= *file* (System/getProperty "babashka.file"))
  (apply -main *command-line-args*))