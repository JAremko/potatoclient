(ns potatoclient.specs.proto-type-mapping
  "Auto-generated mapping from command domains to Java protobuf classes.
  Generated by proto-explorer."
  (:require [clojure.string :as str]))

(def domain->proto-type
  "Maps command domain keywords to their protobuf Java class names."
  {:osd "cmd.OSD.JonSharedCmdOsd$Root", :system "cmd.System.JonSharedCmdSystem$Root", :cv "cmd.CV.JonSharedCmdCv$Root", :gps "cmd.Gps.JonSharedCmdGps$Root", :lrf "cmd.Lrf.JonSharedCmdLrf$Root", :day-cam-glass-heater "cmd.DayCamGlassHeater.JonSharedCmdDayCamGlassHeater$Root", :day-camera "cmd.DayCamera.JonSharedCmdDayCamera$Root", :heat-camera "cmd.HeatCamera.JonSharedCmdHeatCamera$Root", :lira "cmd.Lira.JonSharedCmdLira$Root", :lrf_calib "cmd.Lrf_calib.JonSharedCmdLrfAlign$Root", :root "cmd.JonSharedCmd$Root", :compass "cmd.Compass.JonSharedCmdCompass$Root", :cmd "cmd.JonSharedCmd$Root", :rotary-platform "cmd.RotaryPlatform.JonSharedCmdRotary$Root"})

(defn infer-proto-type
  "Infer the protobuf type from command structure."
  [command]
  (let [top-keys (keys command)]
    (cond
      ;; Root-level commands
      (some #{:ping :noop} top-keys) (:root domain->proto-type)
      ;; Domain commands
      :else (when-let [domain (first (filter domain->proto-type top-keys))]
              (get domain->proto-type domain)))))
